from flask import Flask, render_template, request, session, jsonify, redirect
from datetime import timedelta
import random
import sqlite3
import emoji
import logging
import os
import hashlib
import hmac
import json
from config import TASKS, REWARDS, TELEGRAM, REFERRAL
import requests
from utils import get_or_create_referral_code, get_referral_stats, process_referral_reward, add_referral

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.secret_key = '2007david'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
app.config.update(
    SESSION_COOKIE_SECURE=False,
    SESSION_COOKIE_HTTPONLY=True,
    SESSION_COOKIE_SAMESITE='Lax',
    PERMANENT_SESSION_LIFETIME=timedelta(minutes=5)
)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = '6003178703:AAE9UECUcRMBFybQa4BNMZps1e9zJQDK6o8'

def validate_telegram_data(init_data):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É init_data
        data_dict = dict(param.split('=') for param in init_data.split('&'))
        
        # –ü–æ–ª—É—á–∞–µ–º hash
        received_hash = data_dict.pop('hash')
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        data_check_string = '\n'.join(f'{k}={v}' for k, v in sorted(data_dict.items()))
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        secret_key = hmac.new('WebAppData'.encode(), BOT_TOKEN.encode(), hashlib.sha256).digest()
        
        # –í—ã—á–∏—Å–ª—è–µ–º hash
        calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
        
        return calculated_hash == received_hash
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö Telegram: {e}")
        return False

def init_db():
    try:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        
        c.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id TEXT PRIMARY KEY,
                      username TEXT,
                      first_name TEXT,
                      verified INTEGER DEFAULT 0,
                      balance INTEGER DEFAULT 0)''')
                      
        c.execute('''CREATE TABLE IF NOT EXISTS completed_tasks
                     (user_id TEXT,
                      task_id INTEGER,
                      completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      PRIMARY KEY (user_id, task_id))''')
                      
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise e

def check_channel_subscription(user_id, channel):
    try:
        url = f'https://api.telegram.org/bot{BOT_TOKEN}/getChatMember'
        params = {
            'chat_id': channel,
            'user_id': user_id
        }
        
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                status = result['result']['status']
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                return status in ['member', 'administrator', 'creator']
        logger.warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {response.json()}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def add_balance(user_id, amount):
    try:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', 
                 (amount, user_id))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return False

def is_task_completed(user_id, task_id):
    try:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        result = c.execute('''SELECT 1 FROM completed_tasks 
                             WHERE user_id = ? AND task_id = ?''', 
                          (user_id, task_id)).fetchone()
        conn.close()
        return bool(result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
        return False

def mark_task_completed(user_id, task_id):
    try:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute('''INSERT INTO completed_tasks (user_id, task_id) 
                     VALUES (?, ?)''', (user_id, task_id))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ: {e}")
        return False

def verify_user_captcha(user_id, answer):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –∫–∞–ø—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT captcha FROM captcha_sessions WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    
    if result and str(result[0]) == str(answer):
        return True
    return False

@app.route('/')
def index():
    try:
        emojis = ['üòä', 'üåü', 'üéÆ', 'üéµ', 'üçï', 'üê±', 'üå∫', '‚öΩ', '‚ù§Ô∏è']
        correct_emoji = random.choice(emojis)
        wrong_emojis = random.sample([e for e in emojis if e != correct_emoji], 8)
        all_emojis = wrong_emojis + [correct_emoji]
        random.shuffle(all_emojis)
        
        session.clear()
        session['correct_emoji'] = correct_emoji
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω correct_emoji –≤ —Å–µ—Å—Å–∏–∏: {correct_emoji}")
        
        return render_template('index.html', 
                             emojis=all_emojis, 
                             correct_emoji=correct_emoji)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ index: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/verify', methods=['POST'])
def verify():
    try:
        selected_emoji = request.form.get('emoji')
        correct_emoji = session.get('correct_emoji')
        user_id = request.form.get('user_id')
        username = request.form.get('username')
        first_name = request.form.get('first_name')
        
        logger.debug(f"""
        –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:
        selected_emoji: {selected_emoji}
        correct_emoji: {correct_emoji}
        user_id: {user_id}
        username: {username}
        first_name: {first_name}
        """)
        
        if not all([selected_emoji, correct_emoji, user_id]):
            missing = []
            if not selected_emoji: missing.append('emoji')
            if not correct_emoji: missing.append('correct_emoji')
            if not user_id: missing.append('user_id')
            error_msg = f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: {", ".join(missing)}'
            logger.error(error_msg)
            return jsonify({'success': False, 'message': error_msg}), 400
        
        if selected_emoji == correct_emoji:
            conn = sqlite3.connect('users.db')
            c = conn.cursor()
            c.execute('''INSERT OR REPLACE INTO users 
                     (user_id, username, first_name, verified) 
                     VALUES (?, ?, ?, 1)''', 
                     (user_id, username or '', first_name or ''))
            conn.commit()
            conn.close()
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            return jsonify({
                'success': True,
                'message': '–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
                'redirect': f'/tasks?user_id={user_id}'
            })
        
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return jsonify({
            'success': False,
            'message': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ verify: {e}")
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/tasks')
def tasks_page():
    try:
        # –ü–æ–ª—É—á–∞–µ–º init_data –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        init_data = request.args.get('tgWebAppData') or request.headers.get('X-Telegram-Web-App-Data')
        user_id = request.args.get('user_id')

        # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –µ—Å–ª–∏ –Ω–µ—Ç init_data –∏ –µ—Å—Ç—å DEBUG —Ä–µ–∂–∏–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if app.debug and not init_data and user_id:
            conn = sqlite3.connect('users.db')
            c = conn.cursor()
            user = c.execute('SELECT verified FROM users WHERE user_id = ?', (user_id,)).fetchone()
            conn.close()
            
            if not user or not user[0]:
                return redirect('/')
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            task = TASKS['channel_subscription']
            
            return render_template('tasks.html', 
                                 task=task,
                                 currency_name=REWARDS['currency_name'],
                                 user_id=user_id)
        
        # –î–ª—è production: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ Telegram
        if not init_data or not validate_telegram_data(init_data):
            return jsonify({'error': 'Unauthorized'}), 401
            
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        data_dict = dict(param.split('=') for param in init_data.split('&'))
        user_data = json.loads(data_dict.get('user', '{}'))
        user_id = user_data.get('id')
        
        if not user_id:
            return jsonify({'error': 'User not found'}), 404
            
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        user = c.execute('SELECT verified FROM users WHERE user_id = ?', (user_id,)).fetchone()
        conn.close()
        
        if not user or not user[0]:
            return redirect('/')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        task = TASKS['channel_subscription']
        
        return render_template('tasks.html', 
                             task=task,
                             currency_name=REWARDS['currency_name'],
                             user_id=user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ tasks_page: {e}")
        return redirect('/')

@app.route('/check_subscription', methods=['POST'])
def check_subscription():
    try:
        user_id = request.form.get('user_id')
        task_id = request.form.get('task_id')
        test_mode = request.form.get('test_mode') == 'true'
        
        if not user_id or not task_id:
            return jsonify({
                'success': False,
                'message': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
            }), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        if is_task_completed(user_id, task_id):
            return jsonify({
                'success': False,
                'message': '–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ'
            })

        task = TASKS['channel_subscription']
        channel = task['channel']
        reward = task['reward']

        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å
        is_subscribed = True if test_mode else check_channel_subscription(user_id, channel)

        if is_subscribed:
            # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
            if add_balance(user_id, reward):
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
                if mark_task_completed(user_id, task_id):
                    return jsonify({
                        'success': True,
                        'message': f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} {REWARDS["currency_name"]}',
                        'reward': reward
                    })
                else:
                    # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
                    add_balance(user_id, -reward)
                    return jsonify({
                        'success': False,
                        'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞'
                    })
            else:
                return jsonify({
                    'success': False,
                    'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã'
                })
        else:
            return jsonify({
                'success': False,
                'message': f'–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª {channel}. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
            })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return jsonify({
            'success': False,
            'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ'
        }), 500

@app.route('/referral')
def referral():
    user_id = request.args.get('user_id')
    if not user_id:
        return "User ID is required", 400

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    referral_code = get_or_create_referral_code(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    stats = get_referral_stats(user_id)
    
    return render_template('referral.html',
                         user_id=user_id,
                         referral_code=referral_code,
                         referrals=stats['referrals'],
                         total_referrals=stats['total_referrals'],
                         total_earnings=stats['total_earnings'],
                         currency_name=REWARDS['currency_name'],
                         referral_reward=REFERRAL['reward'],
                         bot_username=TELEGRAM['bot_username'])

@app.route('/wallet')
def wallet_page():
    try:
        # –ü–æ–ª—É—á–∞–µ–º init_data –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        init_data = request.args.get('tgWebAppData') or request.headers.get('X-Telegram-Web-App-Data')
        user_id = request.args.get('user_id')

        # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –µ—Å–ª–∏ –Ω–µ—Ç init_data –∏ –µ—Å—Ç—å DEBUG —Ä–µ–∂–∏–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if app.debug and not init_data and user_id:
            conn = sqlite3.connect('users.db')
            c = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,)).fetchone()
            conn.close()
            
            if not user:
                return redirect('/')
            
            balance = user[0]
            
            return render_template('wallet.html', 
                                 user_id=user_id,
                                 balance=balance,
                                 currency_name=REWARDS['currency_name'])

        # –î–ª—è production: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ Telegram
        if not init_data or not validate_telegram_data(init_data):
            return jsonify({'error': 'Unauthorized'}), 401
            
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        data_dict = dict(param.split('=') for param in init_data.split('&'))
        user_data = json.loads(data_dict.get('user', '{}'))
        user_id = user_data.get('id')
        
        if not user_id:
            return jsonify({'error': 'User not found'}), 404
            
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        user = c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,)).fetchone()
        conn.close()
        
        if not user:
            return redirect('/')
        
        balance = user[0]
        
        return render_template('wallet.html', 
                             user_id=user_id,
                             balance=balance,
                             currency_name=REWARDS['currency_name'])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ wallet_page: {e}")
        return redirect('/')

@app.route('/fortune')
def fortune_page():
    user_id = request.args.get('user_id')
    if not user_id:
        return redirect('/')
    return render_template('fortune.html', user_id=user_id)

@app.route('/exchange')
def exchange_page():
    user_id = request.args.get('user_id')
    if not user_id:
        return redirect('/')
    return render_template('exchange.html', user_id=user_id)

@app.route('/verify_captcha', methods=['POST'])
def verify_captcha():
    user_id = request.form.get('user_id')
    captcha_answer = request.form.get('captcha')
    
    if not user_id or not captcha_answer:
        return jsonify({'success': False, 'message': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É
    if verify_user_captcha(user_id, captcha_answer):
        # –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute('UPDATE users SET verified = 1 WHERE user_id = ?', (user_id,))
        conn.commit()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
        if process_referral_reward(user_id):
            print(f"Referral reward processed for user {user_id}")
        
        conn.close()
        return jsonify({
            'success': True,
            'message': '–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'
        })
    else:
        return jsonify({
            'success': False,
            'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
        })

@app.route('/start')
def start():
    user_id = request.args.get('user_id')
    ref_code = request.args.get('ref')  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    
    if not user_id:
        return "User ID is required", 400
        
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
    if ref_code:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ –∫–æ–¥—É
        c.execute('SELECT user_id FROM users WHERE referral_code = ?', (ref_code,))
        referrer = c.fetchone()
        
        if referrer:
            referrer_id = referrer[0]
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (—Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç 'pending')
            add_referral(user_id, referrer_id)
        
        conn.close()
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–∞–ø—á–µ–π
    return redirect(url_for('index', user_id=user_id))

if __name__ == '__main__':
    init_db()
    app.run(debug=True) 